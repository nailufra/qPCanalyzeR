is_time_exp <<- TRUE
}
else if(str_count(your_frame$input_name[row],"@") == 1 & grepl("@Rep",your_frame$input_name[row])){
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$biol_rep[row] <- substr(strsplit(your_frame$input_name[row],"@")[[1]][[2]],4,10)
biol_replicates <<- TRUE
is_time_exp <<- FALSE
}
else if(str_count(your_frame$input_name[row],"@") == 1 & !grepl("@Rep",your_frame$input_name[row])){
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$time_point[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[2]]
biol_replicates <<- FALSE
is_time_exp <<- TRUE
}
plate_information <<- your_frame
}
for (i in 1:nrow(plate_information)){
checkInput(plate_information,i)
}
#############################################################
###removes all rows labelled with NA in "Gene"
plate_information <- plate_information[!is.na(plate_information$Gene),]
##tech_rep
plate_information <- plate_information %>%
group_by(Gene,Samples,time_point, biol_rep, Plate) %>%
mutate(tech_rep = row_number()) %>%
as.data.frame()
head(plate_information)
# 9) STATISTICS
#############################################################
calculate_statistics <- function(){
###calculate statistics
plate_information <<- plate_information %>%
group_by(Gene,Samples,time_point,biol_rep) %>%
mutate(ct_mean = mean(Ct, na.rm = TRUE),
ct_std_dev = sd(Ct, na.rm = TRUE),
ct_std_err = std.error(Ct, na.rm = TRUE)) %>%
as.data.frame()
#relExpression & dCT
plate_information <<- plate_information %>%
arrange(Gene) %>%
group_by(Gene) %>%
filter(used_in_analysis == TRUE) %>%
mutate(relative_expression = (2^(filter(., Gene == housekeeping_gene)$Ct) / 2^Ct) * 100,
relative_expression_mean = (2^(filter(., Gene == housekeeping_gene)$ct_mean) / 2^ct_mean) * 100,
dCt = Ct - filter(., Gene == housekeeping_gene)$Ct,
dct_mean = ct_mean - filter(., Gene == housekeeping_gene)$ct_mean) %>%
as.data.frame()
##2^-dCT
plate_information$log2_dCt <<- 2^-(plate_information$dCt)
##2^-ddCT
# if(!is_time_exp & !biol_replicates){
#   plate_information <<- plate_information %>%
#     group_by(Gene,biol_rep) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[Samples == comparator]) %>%
#     as.data.frame()
# }
#
# else if (is_time_exp){
#   plate_information <<- plate_information %>%
#     arrange(Gene) %>%
#     group_by(Gene,biol_rep,Samples) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[time_point == first_time_point]) %>%
#     as.data.frame()
# }
#
# else if(biol_replicates){
#   plate_information <<- plate_information %>%
#     group_by(Gene,biol_rep,Samples) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[Samples == comparator]) %>%
#     as.data.frame()
# }
if(is_time_exp){
plate_information <<- plate_information %>%
group_by(Gene, biol_rep, Samples) %>%
mutate(ddCt_by_timepoint = dct_mean - dct_mean[time_point == first_time_point]) %>%
as.data.frame()
plate_information$log2ddCt_by_timepoint <<- 2^-(plate_information$ddCt_by_timepoint)
}
plate_information <<- plate_information %>%
group_by(Gene, biol_rep) %>%
mutate(ddCt_by_samples = dct_mean - dct_mean[Samples == comparator]) %>%
as.data.frame()
plate_information$log2ddCt_by_sample <<- 2^-(plate_information$ddCt_by_sample)
### ddct_mean
#plate_information$log2ddCt_by_timepoint <<- 2^-(plate_information$ddCt_by_timepoint)
}
calculate_statistics()
###PLOTS
#arrange
plotting_frame <- plate_information %>%
filter(Gene != housekeeping_gene) %>%
as.data.frame()
result_plot <- function(plot_type, biol_rep, time_point, facet){
#choose plot type
#relative expression
if(plot_type == "relExp"){
if(!biol_rep & !time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = relative_expression_mean, color = Gene, group = Gene))}
}
else if(!time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = relative_expression_mean, color = Gene, group=interaction(Gene, biol_rep), shape=biol_rep, linetype=biol_rep))}
}
else if(!biol_rep){
{p = ggplot(plotting_frame, aes(x = time_point, y = relative_expression_mean , fill = Samples, color = Samples, group = interaction(Gene,Samples), linetype=Gene))}
}
else{
{p = ggplot(plotting_frame, aes(x = time_point, y = relative_expression_mean , fill = Samples, color = Samples, group = interaction(Samples, biol_rep, Gene),
linetype=biol_rep, shape=Gene))}
}
p = p + ylab(paste("Relative Expression - (",housekeeping_gene," 100%)",sep=""))
}
#ddCt
else if(plot_type == "ddCt"){
if(!biol_rep & !time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = log2ddCt_by_sample, color = Gene, group = Gene))}
}
else if(!time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = log2ddCt_by_sample, color = Gene, group=interaction(Gene, biol_rep), shape=biol_rep, linetype = biol_rep))}
}
else if(!biol_rep){
{p = ggplot(plotting_frame, aes(x = time_point, y = log2ddCt_by_timepoint, fill = Samples, color = Samples, group = interaction(Gene,Samples), linetype=Gene))}
}
else{
{p = ggplot(plotting_frame, aes(x = time_point, y = log2ddCt_by_timepoint, fill = Samples, color = Samples, group = interaction(Samples, biol_rep, Gene), linetype=biol_rep, shape=Gene))}
}
p = p + ylab(bquote('2'^-ΔΔCt))
}
#choose faceting
if(facet){
{p = p + facet_grid(Gene~Samples, scales = "free")}
}
p = p + geom_line(size= 1) +
geom_point(size = 3) +
ggtitle(paste(experiment_name)) +
theme(axis.text = element_text(size=7, color="black"),
plot.title = element_text(hjust = 0.5, size= 15),
legend.position = "right",
legend.title = element_text(size = 8),
panel.border = element_rect(color = "black", fill = NA, size = 1))
print(p)
}
p3 <- result_plot(plot_type = "relExp", biol_rep = biol_replicates, time_point = is_time_exp, facet = TRUE)
p4 <- result_plot(plot_type = "relExp", biol_rep = biol_replicates, time_point = is_time_exp, facet = FALSE)
p5 <- result_plot(plot_type = "ddCt", biol_rep = biol_replicates, time_point = is_time_exp, facet = TRUE)
p6 <- result_plot(plot_type = "ddCt", biol_rep = biol_replicates, time_point = is_time_exp, facet = FALSE)
export_plots <- function(plot, name, format){
ggsave(paste(experiment_name,"_Results/",experiment_name,"_",name,format,sep = ""), plot, width = 297, height = 210, units = "mm")
}
export_plots(p1,"plateOverview",".pdf")
export_plots(p2,"usedSamples",".pdf")
export_plots(p3,"relExp_facet",".pdf")
export_plots(p4,"relExp",".pdf")
export_plots(p5,"ddCt_facet",".pdf")
export_plots(p6,"ddCt",".pdf")
############ qPCanalyzeR #####################
###### V. 0.0
###### https://github.com/nailufra/qPCanalyzeR
###### Only for non-commercial use
######################################################### BEGIN: USER INPUT AREA #################################################################
rm(list=ls())
# 0.1) MANDATORY PARAMETERS
#name of your experiment (required for output directory) [string]
experiment_name <- "my_test"
#specify your working directory (directory where results are exported to) (e.g. "/home/user/.../") [string]
setwd("/home/julian/pCloudDrive//qPCanalyzeR/qPCanalyzer_testdata/one_plate/neither/")
#number of 384-well plates used in this experiment (required for plate input) [integer]
total_plate_count <- 1
# specify the gene treated as housekeeping gene, i.e. expression level of this gene is set to 100%.
# Expression of other genes is set in relation to it. Make sure it is written exactly as in your GenesPlateView file (e.g. "ACTIN") [string]
housekeeping_gene <- "HK"
#ignore_samples <- c("H2O")
ignore_samples <- c("H2O")
#Comparator for ddCt
comparator <- "Control"
#first time_point for ddCt (when using timecourse experiments)
first_time_point <- "1"
# OPTIONAL PARAMETERS
# Name samples that should be ignored in analysis
# You can specify multiple samples by using c("Gene1","Gene2",...)
# Make sure it is written exactly as in your GenesPlateView file (e.g. "PP2A") [string]
ignore_genes <- c()
#Set plotting order of samples (default: alphabetical order)
plotting_order <- c()
# size of plots
point_size <- 2.5
######################################################### END: USER INPUT AREA #################################################################
####################################################################
### PRESS STRG + A, then STRG + ENTER and check output directory ###
####################################################################
#setting parameters (will be adapted below based on input)
is_time_exp <- FALSE
biol_replicates <- FALSE
# 1) LOADING REQUIRED PACKAGES
#################################
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggforce)
library(stringr)
library(plotrix)
#################################
# 2) PREPARING OUTPUT
#############################################################
# 2.1) creates directories where output will be exported to.
dir.create(file.path(paste(getwd(),"/",experiment_name,"_","Results",sep="")))
#############################################################
# 3) LOADING DATA
# You will be asked for every 384-well plate
#############################################################
create_input <- function(nameOut,sepa){
x <- as.list(total_plate_count)
for (i in 1:total_plate_count){
x[[i]] <- assign(paste(nameOut,i,sep=""),read.delim(file.choose(), header = FALSE, sep = sepa))
}
assign(as.list(match.call())[[2]],x,envir = .GlobalEnv)
}
# 3.1) provide BioRad output files (Plate View Results.csv)
create_input("plate_input",",")
# 3.2) provide your pipetting scheme: (c)DNA (Plate View)
create_input("sample_input",",")
# 3.3) provide your pipetting scheme: GOIs (PlateView)
create_input("gene_input",",")
#############################################################
# 4) MODIFY PLATE INPUT
######################################
modify_plate_input <- function(){
for (z in 1:total_plate_count){
x <- as.data.frame(plate_input[[z]])
# extracts every 4th line from input (consider specific output!)
x <- x[seq(4, nrow(x), 4),]
# removes unneccessary column
x[,2] <- NULL
# NAs instead of "n. def."
x[x=="n. def."] <- NA
# rename colnames and rownames
x <- data.frame(x, row.names = x[,1])
x[] <- lapply(x, gsub, pattern = ",", replacement= ".")
#remove first column
x[,1] <- NULL
#alter colnames
colnames(x) <- seq(1,24)
plate_input[[z]] <<- x
}
}
modify_plate_input()
######################################
# 5) CREATING DATAFRAME
######################################
create_data_frame <- function(){
plate_information <<- data.frame(sample_id = seq(1,384*total_plate_count),
field_id = rep(NA,384*total_plate_count),
Row = rep(NA,384*total_plate_count),
Column = rep(NA,384*total_plate_count),
Gene = rep(NA,384*total_plate_count),
input_name = rep(NA,384*total_plate_count),
Samples = rep(NA,384*total_plate_count),
time_point = rep(0,384*total_plate_count),
biol_rep = rep(1,384*total_plate_count),
Plate = rep(0,384*total_plate_count),
Ct = rep(NA,384*total_plate_count),
used_in_analysis = rep(FALSE,384*total_plate_count))
}
create_data_frame()
######################################
# 6) FILL DATAFRAME
######################################
# 6.1) field_id,Row,Column,Plate
modify_data_frame <- function(){
counter = 1
for (z in 1:total_plate_count){
for (i in 1:nrow(plate_input[[z]])){
for (j in 1:length(plate_input[[z]])){
plate_information$field_id[counter] <<- paste(rownames(plate_input[[z]])[i],colnames(plate_input[[z]])[j],sep="")
plate_information$Row[counter] <<- paste0(rownames(plate_input[[z]])[i],sep="")
plate_information$Column[counter] <<- paste0(colnames(plate_input[[z]])[j],sep="")
plate_information$Plate[counter] <<- z
counter <- counter + 1
}
}
}
}
modify_data_frame()
# 6.2) Fill DataFrame with values
fill_data_frame <- function(your_col,your_input){
for (z in 1:total_plate_count){
counter = 1
for (i in 1:nrow(your_input[[z]])){
for (j in 1:length(your_input[[z]])){
plate_information[counter, your_col] <<- as.character(your_input[[z]][i,j])
counter <- counter + 1
}
}
}
plate_information$Ct <- as.numeric(plate_information$Ct)
plate_information <<- as.data.frame(plate_information)
}
# 6.2.1) Ct Values
fill_data_frame("Ct",plate_input)
# 6.2.2) Samples
fill_data_frame("input_name",sample_input)
# 6.2.3) Genes
fill_data_frame("Gene",gene_input)
######################################
###Export information about Ct values using geom_text (geom_label)
plate_information$Column <- factor(plate_information$Column, levels = c(seq(1,24)))
#all fields excluded by user (ignore_samples, ignore_genes) are excluded
plate_information <- plate_information %>%
mutate(used_in_analysis = replace(used_in_analysis, (!Gene %in% ignore_genes) & (!input_name %in% ignore_samples) & !is.na(Gene), TRUE)) %>%
as.data.frame()
###
info_plot <- function(usedsamples){
{
if (!usedsamples){
p = ggplot(plate_information, aes(x = max(as.integer(Column)/2), y = 20, colour = Gene)) +
geom_text(label = round(plate_information$Ct,2), size = 3.75)}
else{
p = ggplot(plate_information, aes(x = max(as.integer(Column)/2), y = 20, fill = used_in_analysis)) +
geom_rect(aes(xmin=0, xmax=max(as.integer(Column)) , ymin=0, ymax=20)) +
geom_text(y=10, label = plate_information$input_name, size = 1, angle = 45, color = "black")}
}
p = p +
facet_wrap_paginate(~cut:Plate) +
facet_grid(Row~Column, switch = "y") +
ylab("") +
scale_colour_brewer(palette = "Dark2") +
ggtitle(paste(experiment_name,"\n","Plate Overview: Raw Ct values - Plate",plate_information$Plate)) +
theme(axis.text = element_text(size=7, color="black"),
plot.title = element_text(hjust = 0.5, size= 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom",
legend.title = element_text(size = 8),
panel.border = element_rect(color = "black", fill = NA, size = 1))
}
p1 <- info_plot(FALSE)
p2 <- info_plot(TRUE)
# 7) CHECK FOR BIOLOGICAL REPLICATES AND DIFFERNET time_pointS
#############################################################
checkInput <- function(your_frame,row){
if(is.na(your_frame$input_name[row]) | your_frame$input_name[row] == ignore_samples){
your_frame$time_point[i] = 0
}
else if(!grepl("@",your_frame$input_name[row])){
your_frame$Samples[i] = your_frame$input_name[i]
your_frame$time_point[i] = 1
}
else if(str_count(your_frame$input_name[row],"@") > 1){
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$time_point[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[2]]
your_frame$biol_rep[row] <- substr(strsplit(your_frame$input_name[row],"@")[[1]][[3]],4,10)
biol_replicates <<- TRUE
is_time_exp <<- TRUE
}
else if(str_count(your_frame$input_name[row],"@") == 1 & grepl("@Rep",your_frame$input_name[row])){
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$biol_rep[row] <- substr(strsplit(your_frame$input_name[row],"@")[[1]][[2]],4,10)
biol_replicates <<- TRUE
is_time_exp <<- FALSE
}
else if(str_count(your_frame$input_name[row],"@") == 1 & !grepl("@Rep",your_frame$input_name[row])){
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$Samples[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[1]]
your_frame$time_point[row] <- strsplit(your_frame$input_name[row],"@")[[1]][[2]]
biol_replicates <<- FALSE
is_time_exp <<- TRUE
}
plate_information <<- your_frame
}
for (i in 1:nrow(plate_information)){
checkInput(plate_information,i)
}
#############################################################
###removes all rows labelled with NA in "Gene"
plate_information <- plate_information[!is.na(plate_information$Gene),]
##tech_rep
plate_information <- plate_information %>%
group_by(Gene,Samples,time_point, biol_rep, Plate) %>%
mutate(tech_rep = row_number()) %>%
as.data.frame()
head(plate_information)
# 9) STATISTICS
#############################################################
calculate_statistics <- function(){
###calculate statistics
plate_information <<- plate_information %>%
group_by(Gene,Samples,time_point,biol_rep) %>%
mutate(ct_mean = mean(Ct, na.rm = TRUE),
ct_std_dev = sd(Ct, na.rm = TRUE),
ct_std_err = std.error(Ct, na.rm = TRUE)) %>%
as.data.frame()
#relExpression & dCT
plate_information <<- plate_information %>%
arrange(Gene) %>%
group_by(Gene) %>%
filter(used_in_analysis == TRUE) %>%
mutate(relative_expression = (2^(filter(., Gene == housekeeping_gene)$Ct) / 2^Ct) * 100,
relative_expression_mean = (2^(filter(., Gene == housekeeping_gene)$ct_mean) / 2^ct_mean) * 100,
dCt = Ct - filter(., Gene == housekeeping_gene)$Ct,
dct_mean = ct_mean - filter(., Gene == housekeeping_gene)$ct_mean) %>%
as.data.frame()
##2^-dCT
plate_information$log2_dCt <<- 2^-(plate_information$dCt)
##2^-ddCT
# if(!is_time_exp & !biol_replicates){
#   plate_information <<- plate_information %>%
#     group_by(Gene,biol_rep) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[Samples == comparator]) %>%
#     as.data.frame()
# }
#
# else if (is_time_exp){
#   plate_information <<- plate_information %>%
#     arrange(Gene) %>%
#     group_by(Gene,biol_rep,Samples) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[time_point == first_time_point]) %>%
#     as.data.frame()
# }
#
# else if(biol_replicates){
#   plate_information <<- plate_information %>%
#     group_by(Gene,biol_rep,Samples) %>%
#     mutate(ddCt_by_timepoint = dct_mean - dct_mean[Samples == comparator]) %>%
#     as.data.frame()
# }
if(is_time_exp){
plate_information <<- plate_information %>%
group_by(Gene, biol_rep, Samples) %>%
mutate(ddCt_by_timepoint = dct_mean - dct_mean[time_point == first_time_point]) %>%
as.data.frame()
plate_information$log2ddCt_by_timepoint <<- 2^-(plate_information$ddCt_by_timepoint)
}
plate_information <<- plate_information %>%
group_by(Gene, biol_rep) %>%
mutate(ddCt_by_samples = dct_mean - dct_mean[Samples == comparator]) %>%
as.data.frame()
plate_information$log2ddCt_by_sample <<- 2^-(plate_information$ddCt_by_sample)
### ddct_mean
#plate_information$log2ddCt_by_timepoint <<- 2^-(plate_information$ddCt_by_timepoint)
}
calculate_statistics()
###PLOTS
#arrange
plotting_frame <- plate_information %>%
filter(Gene != housekeeping_gene) %>%
as.data.frame()
result_plot <- function(plot_type, biol_rep, time_point, facet){
#choose plot type
#relative expression
if(plot_type == "relExp"){
if(!biol_rep & !time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = relative_expression_mean, color = Gene, group = Gene))}
}
else if(!time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = relative_expression_mean, color = Gene, group=interaction(Gene, biol_rep), shape=biol_rep, linetype=biol_rep))}
}
else if(!biol_rep){
{p = ggplot(plotting_frame, aes(x = time_point, y = relative_expression_mean , fill = Samples, color = Samples, group = interaction(Gene,Samples), linetype=Gene))}
}
else{
{p = ggplot(plotting_frame, aes(x = time_point, y = relative_expression_mean , fill = Samples, color = Samples, group = interaction(Samples, biol_rep, Gene),
linetype=biol_rep, shape=Gene))}
}
p = p + ylab(paste("Relative Expression - (",housekeeping_gene," 100%)",sep=""))
}
#ddCt
else if(plot_type == "ddCt"){
if(!biol_rep & !time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = log2ddCt_by_sample, color = Gene, group = Gene))}
}
else if(!time_point){
{p = ggplot(plotting_frame, aes(x = Samples, y = log2ddCt_by_sample, color = Gene, group=interaction(Gene, biol_rep), shape=biol_rep, linetype = biol_rep))}
}
else if(!biol_rep){
{p = ggplot(plotting_frame, aes(x = time_point, y = log2ddCt_by_timepoint, fill = Samples, color = Samples, group = interaction(Gene,Samples), linetype=Gene))}
}
else{
{p = ggplot(plotting_frame, aes(x = time_point, y = log2ddCt_by_timepoint, fill = Samples, color = Samples, group = interaction(Samples, biol_rep, Gene), linetype=biol_rep, shape=Gene))}
}
p = p + ylab(bquote('2'^-ΔΔCt))
}
#choose faceting
if(facet){
{p = p + facet_grid(Gene~Samples, scales = "free")}
}
p = p + geom_line(size= 1) +
geom_point(size = 3) +
ggtitle(paste(experiment_name)) +
theme(axis.text = element_text(size=7, color="black"),
plot.title = element_text(hjust = 0.5, size= 15),
legend.position = "right",
legend.title = element_text(size = 8),
panel.border = element_rect(color = "black", fill = NA, size = 1))
print(p)
}
p3 <- result_plot(plot_type = "relExp", biol_rep = biol_replicates, time_point = is_time_exp, facet = TRUE)
p4 <- result_plot(plot_type = "relExp", biol_rep = biol_replicates, time_point = is_time_exp, facet = FALSE)
p5 <- result_plot(plot_type = "ddCt", biol_rep = biol_replicates, time_point = is_time_exp, facet = TRUE)
p6 <- result_plot(plot_type = "ddCt", biol_rep = biol_replicates, time_point = is_time_exp, facet = FALSE)
export_plots <- function(plot, name, format){
ggsave(paste(experiment_name,"_Results/",experiment_name,"_",name,format,sep = ""), plot, width = 297, height = 210, units = "mm")
}
export_plots(p1,"plateOverview",".pdf")
export_plots(p2,"usedSamples",".pdf")
export_plots(p3,"relExp_facet",".pdf")
export_plots(p4,"relExp",".pdf")
export_plots(p5,"ddCt_facet",".pdf")
export_plots(p6,"ddCt",".pdf")
